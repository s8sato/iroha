[package]
name = "iroha_data_model"

edition.workspace = true
version.workspace = true
authors.workspace = true

license.workspace = true
categories = ["cryptography::cryptocurrencies", "api-bindings"]

[lints]
workspace = true

[badges]
is-it-maintained-issue-resolution = { repository = "https://github.com/hyperledger/iroha" }
is-it-maintained-open-issues = { repository = "https://github.com/hyperledger/iroha" }
maintenance = { status = "actively-developed" }

[features]
default = ["std"]
# Enable static linkage of the rust standard library.
# Disabled for WASM interoperability, to reduce the binary size.
# Please refer to https://docs.rust-embedded.org/book/intro/no-std.html
std = ["iroha_macro/std", "iroha_version/std", "iroha_crypto/std", "iroha_primitives/std", "thiserror", "displaydoc/std", "strum/std", "once_cell"]
# Enable API for HTTP requests. Should be activated for HTTP clients
http = ["std", "warp", "iroha_version/http"]
# Replace structures and methods with FFI equivalents to facilitate dynamic linkage (mainly used in smartcontracts)
#ffi_import = ["iroha_ffi", "iroha_primitives/ffi_import", "iroha_crypto/ffi_import"]

# Expose FFI API for dynamic linking (Internal use only)
ffi_export = ["std", "iroha_ffi", "iroha_primitives/ffi_export", "iroha_crypto/ffi_export"]
# Expose API for mutating structures (Internal use only)
transparent_api = []

[dependencies]
iroha_primitives = { workspace = true }
iroha_data_model_derive = { workspace = true }
iroha_crypto = { workspace = true }
iroha_macro = { workspace = true }
iroha_version = { workspace = true, features = ["derive", "json", "scale"] }
iroha_schema = { workspace = true }
iroha_ffi = { workspace = true, optional = true }

parity-scale-codec = { workspace = true, features = ["derive"] }
derive_more = { workspace = true, features = ["as_ref", "display", "constructor", "from_str", "from", "into"] }
serde = { workspace = true, features = ["derive"] }
serde_with = { workspace = true, features = ["macros"] }
serde_json = { workspace = true }
warp = { workspace = true, optional = true }
thiserror = { workspace = true, optional = true }
displaydoc = { workspace = true }
getset = { workspace = true }
strum = { workspace = true, features = ["derive"] }
base64 = { workspace = true, features = ["alloc"] }
once_cell = { workspace = true, optional = true }

[dev-dependencies]
iroha_crypto = { workspace = true, features = ["rand"] }
iroha_sample_params = { workspace = true }

trybuild = { workspace = true }
criterion = { workspace = true }

[[bench]]
name = "time_event_filter"
harness = false

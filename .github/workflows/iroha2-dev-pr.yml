name: I2::Dev::Tests

on:
  pull_request:
    branches: [iroha2-dev]
    paths:
      - '**.rs'
      - '**.json'
      - '**.toml'
      - '**.yml'

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: [self-hosted, Linux] #ubuntu-latest
    #container: rust:1.56-buster
    container:
      image: 7272721/i2-ci:latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
              ${{ env.CARGO_HOME }}
              target/
          key: iroha2-rust-test-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
              iroha2-rust-test

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
            build-essential \
            ca-certificates \
            clang \
            llvm-dev
      - name: Run tests
        run: mold -run cargo test --workspace --no-fail-fast -- --skip unstable_network

  test-consensus-with-mock:
    runs-on: [self-hosted, Linux] #ubuntu-latest
    #container: rust:1.56-buster
    container:
      image: 7272721/i2-ci:latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
              ${{ env.CARGO_HOME }}
              target/
          key: iroha2-rust-test-network-mock-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
              iroha2-rust-test-network-mock-

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
            build-essential \
            ca-certificates \
            clang \
            llvm-dev
      - name: Run iroha tests with network mock
        run: mold -run cargo test --features mock -- --ignored --skip unstable_network
        working-directory: core/test_network

  test-deadlock-detection:
    runs-on: [self-hosted, Linux] #ubuntu-latest
    #container: rust:1.56-buster
    container:
      image: 7272721/i2-ci:latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
              ${{ env.CARGO_HOME }}
              target/
          key: iroha2-rust-deadlock-detection-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
              iroha2-rust-deadlock-detection

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
            build-essential \
            ca-certificates \
            clang \
            llvm-dev
      - name: Run iroha_actor deadlock detection tests
        run: mold -run cargo test --features deadlock_detection -- --skip unstable_network
        working-directory: actor

  test-api:
    runs-on: [self-hosted, Linux] #ubuntu-latest
    if: ${{ false }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Setup docker test environment
        run: ./scripts/setup_docker_test_env.sh
      - name: Test iroha2-java api
        run: ./scripts/test_iroha2_java_api.sh
      - name: Cleanup test iroha2-java api
        run: ./scripts/cleanup_iroha2_java_api.sh
      - name: Cleanup docker test environment
        run: ./scripts/cleanup_docker_test_env.sh
      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't
        # cached by GitHub Actions.  Restoring these files from a
        # GitHub Actions cache might cause problems for future builds.
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

  # Coverage is both in PR and in push pipelines so that:
  # 1. PR can get coverage report from bot.
  # 2  Coverage bot can have results from `iroha2-dev` to report coverage changes.
  coverage:
    runs-on: [self-hosted, Linux]
    #container: rust:1.56-buster
    container:
      image: 7272721/i2-ci:latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
              ${{ env.CARGO_HOME }}
              target/
          key: iroha2-rust-test-coverage-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
              iroha2-rust-test-coverage
      - name: Install dependencies # Not strictly needed, but doesn't take too long.
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
            build-essential \
            ca-certificates \
            clang \
            llvm-dev \
      - name: Cargo clean
        run: cargo clean
        env:
          RUSTFLAGS: "-Zinstrument-coverage"
      - name: Run tests
        run: mold -run cargo +nightly-2021-10-22 test --workspace --no-fail-fast || true
        env:
          RUSTFLAGS: "-Zinstrument-coverage"
          LLVM_PROFILE_FILE: "iroha-%p-%m.profraw"
      - name: GRCOV coverage report
        run: grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "/*" -o lcov.info
      - name: Upload coverage to codecov.io
        uses: codecov/codecov-action@v1
        with:
          file: lcov.info
      # This step isn't necessary, but since we're running `cargo clean` in the beginning
      # archival of the artifacts is completely unnecessary.
      - name: Cleanup
        run: cargo clean

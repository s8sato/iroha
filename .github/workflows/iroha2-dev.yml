name: Iroha 2 dev branch workflow

on:
  push:
    branches: [iroha2-dev]

env:
  CARGO_TERM_COLOR: always

jobs:
  test-docker:
    runs-on: [self-hosted, Linux]
    #container: rust:1.56-buster
    container: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
              ~/.cargo
              target/
          key: iroha2-rust-docker-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
              iroha2-rust-docker-

      - name: Install latest rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.56
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
            build-essential \
            ca-certificates \
            clang \
            llvm-dev
      - name: Build Client CLI
        run: cargo build
        working-directory: client_cli
      - name: Build and push Iroha Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: hyperledger/iroha2:dev

      - name: Setup docker test environment
        run: ./scripts/setup_docker_test_env.sh
      - name: Docker compose genesis test
        run: bash -c './scripts/test_genesis_docker_compose.sh || ( docker-compose logs; false )'
      - name: Docker compose test
        run: bash -c './scripts/test_docker_compose.sh || ( docker-compose logs; false )'
      - name: Cleanup docker test environment
        run: ./scripts/cleanup_docker_test_env.sh

  archive-and-publish-schema:
    runs-on: [self-hosted, Linux]
    container: rust:1.56-buster
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
            build-essential \
            ca-certificates \
            clang \
            llvm-dev
      - name: Build
        run: cargo build --release --verbose
      - name: Archive build
        uses: actions/upload-artifact@v2
        with:
          name: cargo-build-release
          path: target/release/iroha
      - name: Archive Client CLI build
        uses: actions/upload-artifact@v2
        with:
          name: cargo-client-cli-build-release
          path: target/release/iroha_client_cli
      - name: Archive Crypto CLI build
        uses: actions/upload-artifact@v2
        with:
          name: cargo-crypto-cli-build-release
          path: target/release/iroha_crypto_cli
      - name: Run schema generation
        run: |
          mkdir -p target/schema
          cargo run -p iroha_schema_bin > target/schema/schema.json
      - name: Upload schema
        uses: actions/upload-artifact@v2
        with:
          name: schema
          path: target/schema

  print-telemetry:
    runs-on: [self-hosted, Linux] #ubuntu-latest
    container: rust:1.56-buster
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
              ${{ env.CARGO_HOME }}
              target/
          key: iroha2-rust-telemetry-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
              iroha2-rust-telemetry-

      - name: Run debug tests and save telemetry
        env:
          TELEMETRY_FILE: ../target/telemetry/debug.json.lz4
        run: |
          mkdir -p target/telemetry
          cargo test -p iroha_client --all-features -- unstable_network || true
      - name: Run release tests and save telemetry
        env:
          TELEMETRY_FILE: ../target/telemetry/release.json.lz4
        run: cargo test -p iroha_client --all-features --release -- unstable_network || true
      - name: Install script dependencies
        run: |
          apt-get update
          apt-get install -y --no-install-recommends lz4 jq
      - name: Print debug telemetry info
        run: ./scripts/analyze_telemetry.sh target/telemetry/debug.json.lz4 >target/telemetry/debug.md
      - name: Print release telemetry info
        run: ./scripts/analyze_telemetry.sh target/telemetry/release.json.lz4 >target/telemetry/release.md
      - name: Print debug telemetry info
        run: |
          echo '## Debug build'
          cat target/telemetry/debug.md
      - name: Print release telemetry info
        run: |
          echo '## Release build'
          cat target/telemetry/release.md
      - name: Create telemetry comment
        uses: actions-ecosystem/action-create-comment@v1
        if: ${{ false }}
        with:
          body: |
            \# Telemetry info
            \## Debug build
            ${{ steps.debug-telemetry.outputs.body }}
            \## Release build
            ${{ steps.release-telemetry.outputs.body }}
          github_token: ${{ secrets.github_token }}
      - name: Archive telemetry
        uses: actions/upload-artifact@v2
        with:
          name: telemetry
          path: target/telemetry



  deploy:
    runs-on: [self-hosted, Linux]
    container: rust:1.56-buster
    needs: test-docker
    steps:
      - uses: actions/checkout@v2
      - name: set up buildx
        uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Iroha Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: hyperledger/iroha2:dev
          build-args: |
            TARGET_DIR=release
            PROFILE=--release

      - name: Build and push Iroha client cli Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: hyperledger/iroha2:client-cli-dev
          build-args: |
            TARGET_DIR=release
            PROFILE=--release
            BIN=iroha_client_cli

      - name: Build and push Iroha Crypto CLI Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: hyperledger/iroha2:crypto-cli-dev
          build-args: |
            TARGET_DIR=release
            PROFILE=--release
            BIN=iroha_crypto_cli

  # Coverage is both in PR and in push pipelines so that:
  # 1. PR can get coverage report from bot.
  # 2  Coverage bot can have results from `iroha2-dev` to report coverage changes.
  coverage:
    runs-on: [self-hosted, Linux]
    #container: rust:1.56-buster
    container:
      image: 7272721/i2-ci:latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
              ${{ env.CARGO_HOME }}
              target/
          key: iroha2-rust-test-coverage-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
              iroha2-rust-test-coverage
      - name: Run tests
        run: mold -run cargo test --workspace --no-fail-fast -- --skip  unstable_network || true
        env:
          RUSTFLAGS: "-Zinstrument-coverage"
          RUSTC_BOOTSTRAP: 1
          LLVM_PROFILE_FILE: "iroha-%p-%m.profraw"
      - name: Generate a grcov coverage report
        run: grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "/*" -o lcov.info
      - name: Upload coverage to codecov.io
        uses: codecov/codecov-action@v1
        with:
          file: lcov.info
